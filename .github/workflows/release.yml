name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@oddle'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build package
        run: npm run build

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Check if pre-release
        id: prerelease
        run: |
          if [[ "${{ steps.version.outputs.VERSION }}" == *"-"* ]]; then
            echo "PRERELEASE=true" >> $GITHUB_OUTPUT
          else
            echo "PRERELEASE=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to NPM
        run: |
          if [[ "${{ steps.prerelease.outputs.PRERELEASE }}" == "true" ]]; then
            npm publish --tag beta
          else
            npm publish --tag latest
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes
        id: release_notes
        run: |
          # Extract changelog for this version
          VERSION="${{ steps.version.outputs.VERSION }}"
          awk "/## \[$VERSION\]/{flag=1} /## \[.*\]/{if(flag && !/## \[$VERSION\]/) exit} flag" CHANGELOG.md > release_notes.txt
          
          # If no changelog entry found, create basic notes
          if [ ! -s release_notes.txt ]; then
            echo "Release $VERSION" > release_notes.txt
            echo "" >> release_notes.txt
            echo "See CHANGELOG.md for details." >> release_notes.txt
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.txt
          draft: false
          prerelease: ${{ steps.prerelease.outputs.PRERELEASE }}

      - name: Upload dist files to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist
          asset_name: dist.zip
          asset_content_type: application/zip